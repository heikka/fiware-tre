{"version":3,"sources":["components/maps/tampere/TampereMap.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["mapContainer","mapboxgl","require","images","url","id","TampereMap","props","_useState","useState","_useState2","Object","slicedToArray","markers","setMarkers","_useState3","_useState4","featureCollection","setFeatureCollection","useEffect","length","axios","get","headers","FIWARE-Service","then","res","markersList","data","featureColl","type","features","i","marker","location","coordinates","lng","lat","daliCommError","daliDimmingError","daliGearError","daliLampError","failure","value","illuminanceLevel","lightOn","mag","fillingLevel","streetAddress","address","feature","geometry","properties","color","itemId","itemType","push","catch","e","console","log","alert","accessToken","map","Map","container","style","center","zoom","addControl","NavigationControl","popup","Popup","closeButton","closeOnClick","popupMenu","on","getCanvas","cursor","p","html","setLngLat","setHTML","addTo","remove","mag1","mag2","mag3","mag4","mag5","mag6","mag7","mag8","mag9","mag10","createDonutChart","offsets","counts","total","fontSize","r","r0","Math","round","w","failColorLeft","donutSegment","lightColorLeft","lightColorRight","point_count","toLocaleString","el","document","createElement","innerHTML","firstChild","start","end","a0","PI","a1","x0","cos","y0","sin","x1","y1","largeArc","join","addSource","cluster","clusterMaxZoom","clusterRadius","clusterProperties","Promise","all","img","resolve","reject","loadImage","error","addImage","addLayer","source","filter","layout","icon-image","text-allow-overlap","icon-allow-overlap","icon-size","text-field","text-font","text-size","paint","text-color","markersOnScreen","doUpdateMarkers","setInterval","updateMarkers","newMarkers","querySourceFeatures","coords","cluster_id","Marker","element","onMove","onMoveend","onZoom","sourceId","isSourceLoaded","react_default","a","width","height","ref","className","App","TampereMap_TampereMap","Boolean","window","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c6d0d76.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\nimport {\r\n    Feature, FeatureCollection, GeometryCollection, LineString,\r\n    MultiLineString, MultiPoint, MultiPolygon, Point, Polygon, GeoJsonGeometryTypes,\r\n    GeoJsonTypes, GeometryObject, Geometry\r\n} from \"geojson\";\r\nimport { identifier, updateExpression } from '@babel/types';\r\n\r\n\r\nvar mapboxgl = require('mapbox-gl/dist/mapbox-gl.js');\r\n\r\ninterface LatLng {\r\n    lat: number,\r\n    lng: number,\r\n    radius?: number,\r\n    lampOffCnt?: number,\r\n    lampOnCnt?: number,\r\n    alarm?: boolean,\r\n    markerCnt?: number\r\n}\r\n\r\n\r\ntype Props = {\r\n    zoom: number\r\n}\r\n\r\nlet mapContainer: any;\r\n\r\nconst images = [\r\n    { url: 'http://com.capelon.city-vision.s3-website.eu-north-1.amazonaws.com/images/light_medium_off_commissionedok_con_error_unsel.png', id: 'lightOffError' },\r\n    { url: 'http://com.capelon.city-vision.s3-website.eu-north-1.amazonaws.com/images/light_medium_off_commissionedok_con_normal_unsel.png', id: 'lightOff' },\r\n    { url: 'http://com.capelon.city-vision.s3-website.eu-north-1.amazonaws.com/images/light_medium_on_commissionedok_con_error_unsel.png', id: 'lightOnError' },\r\n    { url: 'http://com.capelon.city-vision.s3-website.eu-north-1.amazonaws.com/images/light_medium_on_commissionedok_con_normal_unsel.png', id: 'lightOn' },\r\n    { url: 'http://com.capelon.city-vision.s3-website.eu-north-1.amazonaws.com/images/WA 1.png', id: 'wastebin' },\r\n    { url: 'http://com.capelon.city-vision.s3-website.eu-north-1.amazonaws.com/images/site_medium_off_auto_con_normal_sel.png', id: 'cabinet_auto_off' },\r\n    { url: 'http://com.capelon.city-vision.s3-website.eu-north-1.amazonaws.com/images/light_medium_on_notcommissioned_disc_normal_sel.png', id: 'ambientlightsensor' },\r\n    { url: 'http://com.capelon.city-vision.s3-website.eu-north-1.amazonaws.com/images/WA 3.png', id: 'wastebin_low' },\r\n    { url: 'http://com.capelon.city-vision.s3-website.eu-north-1.amazonaws.com/images/WA 2.png', id: 'wastebin_half' },\r\n    { url: 'http://com.capelon.city-vision.s3-website.eu-north-1.amazonaws.com/images/WA 3.png', id: 'wastebin_full' },\r\n];\r\n\r\n\r\n\r\nexport const TampereMap = (props: Props) => {\r\n\r\n    const [markers, setMarkers] = useState([]);\r\n    const [featureCollection, setFeatureCollection] = useState({\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        if (!markers.length) {\r\n            {\r\n                //let url = 'https://context.pre.fiware.cityvision.cloud/v2/entities?type=Streetlight&limit=400&offset=0';\r\n                //let url = 'https://context.tampere.fiware.cityvision.cloud/v2/entities?q=dateModified%3E2019-06-05T12:48:00Z';\r\n                let url = 'https://context.tampere.fiware.cityvision.cloud/v2/entities?limit=800&offset=0';\r\n                url += \"&type=Streetlight%2CStreetlightControlCabinet%2CAmbientLightSensor%2CWasteContainer\";\r\n                axios.get(url,\r\n                    { 'headers': { \"FIWARE-Service\": \"tampere\" } })\r\n                    .then(res => {\r\n                        const markersList = res.data;\r\n                        //console.log(markersList);\r\n\r\n                        const featureColl: FeatureCollection = {\r\n                            type: 'FeatureCollection',\r\n                            features: []\r\n                        };\r\n\r\n                        for (let i: number = 0; i < markersList.length; i++) {\r\n\r\n                            let marker = markersList[i];\r\n                            //console.log('marker:', marker);\r\n                            let location = marker[\"location\"];\r\n                            if (location) {\r\n                                //if (location && marker.type === 'WasteContainer') {\r\n                                //  console.log('marker', marker);\r\n                                let value = location[\"value\"];\r\n                                let coordinates = value[\"coordinates\"];\r\n                                if (coordinates) {\r\n\r\n                                    let lng = coordinates[0];\r\n                                    let lat = coordinates[1];\r\n\r\n                                    let daliCommError = marker[\"daliCommError\"];\r\n                                    let daliDimmingError = marker[\"daliDimmingError\"];\r\n                                    let daliGearError = marker[\"daliGearError\"];\r\n                                    let daliLampError = marker[\"daliLampError\"];\r\n\r\n                                    let failure = 0;\r\n\r\n                                    if (!failure && daliCommError && daliCommError.value === \"on\") {\r\n                                        failure = 1;\r\n                                    }\r\n\r\n                                    if (!failure && daliDimmingError && daliDimmingError.value === \"on\") {\r\n                                        failure = 1;\r\n                                    }\r\n\r\n                                    if (!failure && daliGearError && daliGearError.value === \"on\") {\r\n                                        failure = 1;\r\n                                    }\r\n\r\n                                    if (!failure && daliLampError && daliLampError.value === \"on\") {\r\n                                        failure = 1;\r\n                                    }\r\n\r\n\r\n                                    let illuminanceLevel = marker[\"illuminanceLevel\"];\r\n                                    let intensity = marker[\"intensity\"];\r\n                                    /*\r\n                                    if (illuminanceLevel)\r\n                                        console.log(\"illuminanceLevel\", illuminanceLevel.value);\r\n                                    if (intensity)                                        \r\n                                        console.log(\"intensity\", intensity.value);\r\n                                    */\r\n\r\n                                    let lightOn = 0;\r\n                                    if (illuminanceLevel && illuminanceLevel.value > 0)\r\n                                        lightOn = 1.0;\r\n\r\n                                    let mag = 1;\r\n                                    if (!lightOn && failure)\r\n                                        mag = 2;\r\n                                    if (!lightOn && !failure)\r\n                                        mag = 3;\r\n                                    if (lightOn && !failure)\r\n                                        mag = 4;\r\n\r\n                                    // console.log(marker.type);\r\n                                    // Streetlight\r\n                                    // WasteContainer\r\n                                    // AmbientLightSensor\r\n                                    // StreetlightControlCabinet\r\n                                    if (marker.type === 'WasteContainer') {\r\n                                        mag = 5;\r\n                                        let fillingLevel = 0;\r\n                                        if (marker.fillingLevel && marker.fillingLevel.value)\r\n                                            fillingLevel = marker.fillingLevel.value;\r\n                                        /*\r\n                                                                                    > 0-49%: green\r\n                                                                                    > \r\n                                                                                    > 50-85%: yellow\r\n                                                                                    > \r\n                                                                                    > 86-100% red\r\n                                                                                    > \r\n                                        */\r\n                                        if (fillingLevel > 0)\r\n                                            mag = 8;\r\n\r\n                                        if (fillingLevel >= 0.50)\r\n                                            mag = 9;\r\n\r\n                                        if (fillingLevel >= 0.86)\r\n                                            mag = 10;\r\n\r\n                                    }\r\n\r\n\r\n                                    if (marker.type === 'StreetlightControlCabinet')\r\n                                        mag = 6;\r\n\r\n                                    if (marker.type === 'AmbientLightSensor')\r\n                                        mag = 7;\r\n\r\n                                    let streetAddress = \"\";\r\n                                    let address = marker[\"address\"];\r\n                                    if (address && address.value && address.value && address.value.streetAddress)\r\n                                        streetAddress = address.value.streetAddress;\r\n\r\n\r\n                                    const feature: Feature = {\r\n                                        id: 100 + i,\r\n                                        type: \"Feature\",\r\n                                        geometry: {\r\n                                            type: \"Point\",\r\n                                            coordinates: [lng, lat]\r\n                                        },\r\n                                        properties: {\r\n                                            color: \"#ff0000\",\r\n                                            mag: mag,\r\n                                            lightOn: lightOn,\r\n                                            failure: failure,\r\n                                            streetAddress: streetAddress,\r\n                                            itemId: marker.id,\r\n                                            itemType: marker.type\r\n                                        }\r\n                                    };\r\n\r\n                                    featureColl.features.push(feature);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        setMarkers(markersList);\r\n                        setFeatureCollection(featureColl);\r\n                    })\r\n                    .catch(e => {\r\n                        console.log('Error:', e);\r\n                        alert('Cannot fetch data! ' + e)\r\n                    })\r\n            }\r\n        }\r\n\r\n        mapboxgl.accessToken = 'pk.eyJ1IjoiaGVpa2thIiwiYSI6ImNqd2JybzB0dzA1YXgzem53cWFwd2FnYWYifQ.dfbsP80dQFAG1iOyrQp6mg';\r\n        var map = new mapboxgl.Map({\r\n            container: mapContainer,\r\n            style: 'mapbox://styles/heikka/cjwbsr3380hes1clajwsc7m6y',\r\n            center: [23.7869773, 61.4850743],\r\n            zoom: 14\r\n        });\r\n\r\n        map.addControl(new mapboxgl.NavigationControl());\r\n\r\n        var popup = new mapboxgl.Popup({\r\n            closeButton: false,\r\n            closeOnClick: true\r\n        });\r\n\r\n        var popupMenu = new mapboxgl.Popup({\r\n            closeButton: true,\r\n            closeOnClick: false\r\n        });\r\n\r\n        map.on('mouseenter', 'streetlight', function (e: any) {\r\n            //map.on('mouseenter', 'streetlight', function (e: any) {\r\n            // Change the cursor style as a UI indicator.\r\n            map.getCanvas().style.cursor = 'pointer';\r\n\r\n            // Populate the popup and set its coordinates\r\n            // based on the feature found.\r\n\r\n            let p: any = e.features[0].properties;\r\n\r\n            let html: string = \"\";\r\n            html += p.itemType;\r\n            html += \" \";\r\n            html += p.itemId;\r\n            html += \"<br>\";\r\n            html += p.streetAddress;\r\n            html += \"\";\r\n\r\n            popup.setLngLat(e.features[0].geometry.coordinates)\r\n                //.setHTML(e.features[0].properties.address.value.streetAddress)\r\n                .setHTML(html)\r\n                .addTo(map);\r\n        });\r\n\r\n        map.on('mouseleave', 'streetlight', function () {\r\n            map.getCanvas().style.cursor = '';\r\n            popup.remove();\r\n        });\r\n\r\n        map.on('click', 'streetlight', function (e: any) {\r\n            //map.on('mouseenter', 'streetlight', function (e: any) {\r\n            // Change the cursor style as a UI indicator.\r\n            map.getCanvas().style.cursor = 'pointer';\r\n\r\n            // Populate the popup and set its coordinates\r\n            // based on the feature found.\r\n\r\n            let p: any = e.features[0].properties;\r\n\r\n            let html: string = \"<div class='popup-menu'>\";\r\n            html += p.itemType;\r\n            html += \" \";\r\n            html += p.itemId;\r\n            html += \"<br>\";\r\n            html += p.streetAddress;\r\n\r\n            html += \"<hr><a href='#'>Switch ON</a>\";\r\n            html += \"<br><a href='#'>Set work in progress</a>\";\r\n            html += \"<br><a href='#'>Change dimming group</a>\";\r\n            html += \"<br><a href='#'>Create issue</a>\";\r\n            html += \"<br><a href='#'>Show alarms</a>\";\r\n            html += \"</div>\";\r\n\r\n            popupMenu.setLngLat(e.features[0].geometry.coordinates)\r\n                //.setHTML(e.features[0].properties.address.value.streetAddress)\r\n                .setHTML(html)\r\n                .addTo(map);\r\n        });\r\n        /*\r\n                map.on('click', 'streetlight', function (e: any) {\r\n        \r\n                    var coordinates = e.features[0].geometry.coordinates.slice();\r\n                    //var description = e.features[0].properties.description;\r\n        \r\n                    // Ensure that if the map is zoomed out such that multiple\r\n                    // copies of the feature are visible, the popup appears\r\n                    // over the copy being pointed to.\r\n                    while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\r\n                        coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\r\n                    }\r\n        \r\n                    console.log(coordinates);\r\n        \r\n                    coordinates[0] += 0.01;\r\n                    //coordinates[1] = e.lngLat.lat;\r\n        \r\n                    let p: any = e.features[0].properties;\r\n        \r\n                    let html: string = \"\";\r\n                    html += p.itemType;\r\n                    html += \" \";\r\n                    html += p.itemId;\r\n                    html += \"<br>\";\r\n                    html += p.streetAddress;\r\n        \r\n                    // e.features[0].geometry.coordinates\r\n                    popupMenu.setLngLat(coordinates)\r\n                        //.setHTML(e.features[0].properties.address.value.streetAddress)\r\n                        .setHTML(html)\r\n                        .addTo(map);\r\n                });\r\n        */\r\n\r\n        // filters for classifying streetlights into five categories based on magnitude\r\n        var mag1 = [\"<\", [\"get\", \"mag\"], 2];\r\n        var mag2 = [\"all\", [\">=\", [\"get\", \"mag\"], 2], [\"<\", [\"get\", \"mag\"], 3]];\r\n        var mag3 = [\"all\", [\">=\", [\"get\", \"mag\"], 3], [\"<\", [\"get\", \"mag\"], 4]];\r\n        var mag4 = [\"all\", [\">=\", [\"get\", \"mag\"], 4], [\"<\", [\"get\", \"mag\"], 5]];\r\n        var mag5 = [\"all\", [\">=\", [\"get\", \"mag\"], 5], [\"<\", [\"get\", \"mag\"], 6]];\r\n        var mag6 = [\"all\", [\">=\", [\"get\", \"mag\"], 6], [\"<\", [\"get\", \"mag\"], 7]];\r\n        var mag7 = [\"all\", [\">=\", [\"get\", \"mag\"], 7], [\"<\", [\"get\", \"mag\"], 8]];\r\n        var mag8 = [\"all\", [\">=\", [\"get\", \"mag\"], 8], [\"<\", [\"get\", \"mag\"], 9]];\r\n        var mag9 = [\"all\", [\">=\", [\"get\", \"mag\"], 9], [\"<\", [\"get\", \"mag\"], 10]];\r\n        var mag10 = [\">=\", [\"get\", \"mag\"], 10];\r\n\r\n        var lightOn = [\"get\", \"lightOn\"];\r\n        var failure = [\"get\", \"failure\"];\r\n\r\n        // colors to use for the categories\r\n        var colors = ['#F3F3F4', '#FFCC00', '#A20000', '#fc4e2a', '#e31a1c'];\r\n\r\n        map.on('load', function () {\r\n            // add a clustered GeoJSON source for a sample set of streetlights\r\n            map.addSource('streetlights', {\r\n                \"type\": \"geojson\",\r\n                \"data\": featureCollection,\r\n                \"cluster\": true,\r\n                \"clusterMaxZoom\": 14,\r\n                \"clusterRadius\": 55,\r\n                \"clusterProperties\": {\r\n                    \"mag1\": [\"+\", [\"case\", mag1, 1, 0]],\r\n                    \"mag2\": [\"+\", [\"case\", mag2, 1, 0]],\r\n                    \"mag3\": [\"+\", [\"case\", mag3, 1, 0]],\r\n                    \"mag4\": [\"+\", [\"case\", mag4, 1, 0]],\r\n                    \"mag5\": [\"+\", [\"case\", mag5, 1, 0]],\r\n                    \"mag6\": [\"+\", [\"case\", mag6, 1, 0]],\r\n                    \"mag7\": [\"+\", [\"case\", mag7, 1, 0]],\r\n                    \"mag8\": [\"+\", [\"case\", mag8, 1, 0]],\r\n                    \"mag9\": [\"+\", [\"case\", mag9, 1, 0]],\r\n                    \"mag10\": [\"+\", [\"case\", mag10, 1, 0]],\r\n                    \"lightOn\": [\"+\", lightOn],\r\n                    \"failure\": [\"+\", failure],\r\n                }\r\n            });\r\n\r\n            Promise.all(\r\n                images.map(img => new Promise((resolve, reject) => {\r\n                    map.loadImage(img.url, (error: any, res: any) => {\r\n                        if (error)\r\n                            throw error;\r\n\r\n                        map.addImage(img.id, res)\r\n                        resolve();\r\n                    })\r\n                }))\r\n            )\r\n                .then(() => {\r\n\r\n                    /*\r\n                                        map.addLayer({\r\n                                            id: \"clusters\",\r\n                                            type: \"circle\",\r\n                                            source: \"streetlights\",\r\n                                            filter: [\"has\", \"point_count\"],\r\n                                            paint: {\r\n                                                \"circle-radius\": {\r\n                                                    property: \"point_count\",\r\n                                                    type: \"interval\",\r\n                                                    stops: [\r\n                                                        [0, 20],\r\n                                                        [100, 30],\r\n                                                        [750, 40]\r\n                                                    ]\r\n                                                }\r\n                                            }\r\n                                        });\r\n                    */\r\n                    map.addLayer({\r\n                        id: \"streetlight\",\r\n                        type: \"symbol\",\r\n                        source: \"streetlights\",\r\n                        filter: [\"!\", [\"has\", \"point_count\"]],\r\n                        layout: {\r\n                            //\"icon-image\": \"normal\",\r\n                            \"icon-image\": [\"case\",\r\n                                mag1, \"lightOnError\",\r\n                                mag2, \"lightOffError\",\r\n                                mag3, \"lightOff\",\r\n                                mag4, \"lightOn\",\r\n                                mag5, \"wastebin\",\r\n                                mag6, \"cabinet_auto_off\",\r\n                                mag7, \"ambientlightsensor\",\r\n                                mag8, \"wastebin_low\",\r\n                                mag9, \"wastebin_half\",\r\n                                mag10, \"wastebin_full\",\r\n                                \"lightOn\"],\r\n                            \"text-allow-overlap\": true,\r\n                            \"icon-allow-overlap\": true,\r\n                            \"icon-size\": 1.00\r\n                        }\r\n                    });\r\n                });\r\n\r\n            // circle and symbol layers for rendering individual streetlights (unclustered points)\r\n            /*\r\n            map.addLayer({\r\n                \"id\": \"earthquake_circle\",\r\n                \"type\": \"circle\",\r\n                \"source\": \"streetlights\",\r\n                \"filter\": [\"!=\", \"cluster\", true],\r\n                \"paint\": {\r\n                    \"circle-color\": [\"case\",\r\n                        mag1, colors[0],\r\n                        mag2, colors[1],\r\n                        mag3, colors[2],\r\n                        mag4, colors[3], colors[4]],\r\n                    \"circle-opacity\": 0.6,\r\n                    \"circle-radius\": 12\r\n                }\r\n            });\r\n            */\r\n            map.addLayer({\r\n                \"id\": \"streetlights_label\",\r\n                \"type\": \"symbol\",\r\n                \"source\": \"streetlights\",\r\n                \"filter\": [\"!=\", \"cluster\", true],\r\n                \"layout\": {\r\n                    \"text-field\": \"{point_count_abbreviated}\",\r\n                    \"text-font\": [\"Open Sans Semibold\", \"Arial Unicode MS Bold\"],\r\n                    \"text-size\": 10\r\n                },\r\n                \"paint\": {\r\n                    \"text-color\": [\"case\", [\"<\", [\"get\", \"mag\"], 3], \"black\", \"white\"]\r\n                }\r\n            });\r\n\r\n            // objects for caching and keeping track of HTML marker objects (for performance)\r\n            var markers: any = {};\r\n            var markersOnScreen: any = {};\r\n            let doUpdateMarkers = false;\r\n\r\n            let timer = setInterval(checkUpdateMarkers, 1000);\r\n\r\n            function checkUpdateMarkers() {\r\n                if (doUpdateMarkers) {\r\n                    updateMarkers();\r\n                    doUpdateMarkers = false;\r\n                }\r\n            }\r\n\r\n            const updateMarkers = () => {\r\n\r\n                //console.log(new Date(), 'updateMarkers');\r\n                var newMarkers: any = {};\r\n                var features = map.querySourceFeatures('streetlights');\r\n\r\n                //console.log('features', features);\r\n\r\n                // for every cluster on the screen, create an HTML marker for it (if we didn't yet),\r\n                // and add it to the map if it's not there already\r\n                for (var i = 0; i < features.length; i++) {\r\n                    var coords = features[i].geometry.coordinates;\r\n                    var props = features[i].properties;\r\n                    if (!props.cluster) continue;\r\n                    var id = props.cluster_id;\r\n\r\n                    var marker = markers[id];\r\n                    if (!marker) {\r\n                        var el = createDonutChart(props);\r\n                        marker = markers[id] = new mapboxgl.Marker({ element: el }).setLngLat(coords);\r\n                    }\r\n                    newMarkers[id] = marker;\r\n\r\n                    if (!markersOnScreen[id])\r\n                        marker.addTo(map);\r\n                }\r\n                // for every marker we've added previously, remove those that are no longer visible\r\n                for (id in markersOnScreen) {\r\n                    if (!newMarkers[id])\r\n                        markersOnScreen[id].remove();\r\n                }\r\n                markersOnScreen = newMarkers;\r\n            }\r\n\r\n            function onMove(e: any) {\r\n                //console.log('onMove');\r\n                doUpdateMarkers = true;\r\n                //updateMarkers();\r\n            }\r\n\r\n            function onMoveend(e: any) {\r\n                //console.log('onMoveend');\r\n                doUpdateMarkers = true;\r\n                //updateMarkers();\r\n            }\r\n\r\n            function onZoom(e: any) {\r\n                //console.log('onZoom', e);\r\n                //updateMarkers();\r\n            }\r\n\r\n            // after the GeoJSON data is loaded, update markers on the screen and do so on every map move/moveend\r\n            map.on('data', function (e: any) {\r\n                if (e.sourceId !== 'streetlights' || !e.isSourceLoaded) return;\r\n\r\n                //console.log('on data', map);\r\n\r\n                map.on('move', onMove);\r\n                map.on('moveend', onMoveend);\r\n                map.on('zoom', onZoom);\r\n                updateMarkers();\r\n            });\r\n            /*\r\n                        map.on('mousemove', function (e: any) {\r\n            \r\n                            var features = map.queryRenderedFeatures(e.point, {\r\n                                layers: ['clusters']\r\n                            })\r\n            \r\n                            if (features.length)\r\n                                //console.log('features', features);\r\n            \r\n                                var cluster_id = features[0].properties.cluster_id;\r\n                                if (cluster_id) {\r\n                                    console.log('cluster_id', cluster_id);\r\n                                    //var all_features = cluster.getLeaves(cluster_id, Math.floor(map.getZoom()), limit = Infinity);\r\n                                    //console.log(all_features);\r\n                                }\r\n                        });\r\n            */\r\n\r\n        });\r\n\r\n        // code for creating an SVG donut chart from feature properties\r\n        function createDonutChart(props: any) {\r\n            //console.log(props);\r\n            var offsets = [];\r\n            //console.log('props', props);\r\n            var counts = [props.mag1, props.mag2, props.mag3, props.mag4, props.mag5, props.mag6, props.mag7, props.mag8, props.mag9, props.mag10];\r\n            var total = 0;\r\n            for (var i = 0; i < counts.length; i++) {\r\n                offsets.push(total);\r\n                total += counts[i];\r\n            }\r\n            var fontSize = total >= 1000 ? 22 : total >= 100 ? 20 : total >= 10 ? 18 : 16;\r\n            var r = total >= 1000 ? 50 : total >= 100 ? 32 : total >= 10 ? 24 : 18;\r\n            var r0 = Math.round(r * 0.6);\r\n            var w = r * 2;\r\n            //onmouseover=\"alert(1)\" \r\n            var html = '<svg width=\"' + w + '\" height=\"' + w + '\" viewbox=\"0 0 ' + w + ' ' + w +\r\n                '\" text-anchor=\"middle\" style=\"font: ' + fontSize + 'px sans-serif\">';\r\n            /*\r\n            for (i = 0; i < counts.length; i++) {\r\n                html += donutSegment(offsets[i] / total, (offsets[i] + counts[i]) / total, r, r0, colors[i]);\r\n            }\r\n            */\r\n\r\n\r\n            // FAILURES\r\n            //            let failColorLeft = '#F3F3F4';\r\n            //            let failColorRight = '#F3F3F4';\r\n            let failColorLeft = '#cacace';\r\n            let failColorRight = '#cacace';\r\n\r\n            /*            if (props.failure === props.point_count) {\r\n                            failColorRight = '#A20000';\r\n                            failColorLeft = '#A20000';\r\n                        }\r\n                        else {\r\n                            if (props.failure > 0) {\r\n                                failColorLeft = '#A20000';\r\n                            }\r\n                        }\r\n            */\r\n            if (props.failure > 0) {\r\n                failColorLeft = '#A20000';\r\n            }\r\n            html += donutSegment(0.25, 0.5, r, r0, failColorRight);\r\n            html += donutSegment(0.5, 0.75, r, r0, failColorLeft);\r\n\r\n            // LIGHT ON\r\n            let lightColorLeft = '#cacace';\r\n            let lightColorRight = '#cacace';\r\n            if (props.lightOn === props.point_count) {\r\n                lightColorRight = '#FFCC00';\r\n                lightColorLeft = '#FFCC00';\r\n            }\r\n            else {\r\n                if (props.lightOn > 0) {\r\n                    lightColorLeft = '#FFCC00';\r\n                }\r\n            }\r\n\r\n            html += donutSegment(0.75, 1.0, r, r0, lightColorLeft);\r\n            html += donutSegment(0, 0.25, r, r0, lightColorRight);\r\n\r\n            html += '<circle cx=\"' + r + '\" cy=\"' + r + '\" r=\"' + r0 +\r\n                '\" fill=\"#225A9A\" /><text dominant-baseline=\"central\" fill=\"#ffffff\" transform=\"translate(' +\r\n                r + ', ' + r + ')\">' + total.toLocaleString() + '</text></svg>';\r\n\r\n            //html = '<img src=\"http://com.capelon.city-vision.s3-website.eu-north-1.amazonaws.com/images/blank_4.png\" width=\"'+(2*r)+'\" height=\"auto\" />';\r\n            //html = '<div style=\"background-image: url(http://com.capelon.city-vision.s3-website.eu-north-1.amazonaws.com/images/blank_4.png); background-repeat: no-repeat; width='+r+'px height='+r+'px></div>';\r\n            var el = document.createElement('div');\r\n            el.innerHTML = html;\r\n            return el.firstChild;\r\n        }\r\n\r\n        function donutSegment(start: number, end: number, r: number, r0: number, color: string) {\r\n            if (end - start === 1) end -= 0.00001;\r\n            var a0 = 2 * Math.PI * (start - 0.25);\r\n            var a1 = 2 * Math.PI * (end - 0.25);\r\n            var x0 = Math.cos(a0), y0 = Math.sin(a0);\r\n            var x1 = Math.cos(a1), y1 = Math.sin(a1);\r\n            var largeArc = end - start > 0.5 ? 1 : 0;\r\n\r\n            return ['<path d=\"M', r + r0 * x0, r + r0 * y0, 'L', r + r * x0, r + r * y0,\r\n                'A', r, r, 0, largeArc, 1, r + r * x1, r + r * y1,\r\n                'L', r + r0 * x1, r + r0 * y1, 'A',\r\n                r0, r0, 0, largeArc, 0, r + r0 * x0, r + r0 * y0,\r\n                '\" fill=\"' + color + '\" stroke=\"#343332\" stroke-width=\"0.2\" stroke-opacity=\"1\" />'].join(' ');\r\n        }\r\n\r\n    });\r\n\r\n\r\n    return (\r\n        <div style={{ width: '100%', height: '100%' }}>\r\n            <div ref={el => mapContainer = el} className=\"absolute top right left bottom\" style={{ width: '100%', height: '100%' }} />\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport './App.css';\nimport { TampereMap } from './components/maps/tampere/TampereMap';\nvar mapboxgl = require('mapbox-gl/dist/mapbox-gl.js');\n\nconst App: React.FC = () => {\n \n \n  return (\n    <div className=\"App\">\n      <TampereMap zoom={10}></TampereMap>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}